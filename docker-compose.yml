version: '3.8'

services:
  # PostgreSQL + TimescaleDB for risk state persistence
  postgres:
    image: timescale/timescaledb:latest-pg16
    container_name: nofx-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=nofx_risk
    networks:
      - nofx-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NOFX Trading Backend
  nofx:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nofx-trading
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ./config.json:/app/config.json:ro
      - ./decision_logs:/app/decision_logs
      - ./data:/app/data
      - /etc/localtime:/etc/localtime:ro  # 同步主机时间
      - frontend-dist:/app/web/dist-shared:rw  # 共享前端文件
    environment:
      - TZ=Asia/Shanghai  # 使用中国时区
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=nofx_risk
      - POSTGRES_URL=postgres://postgres:postgres@postgres:5432/nofx_risk?sslmode=disable
      - PERSISTENCE_BACKEND=postgres
      - ENABLE_PERSISTENCE=true
    networks:
      - nofx-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: sh -c "cp -r /app/web/dist/* /app/web/dist-shared/ 2>/dev/null || true && exec ./nofx"

  # Frontend (Nginx)
  nofx-frontend:
    image: nginx:alpine
    container_name: nofx-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    volumes:
      - frontend-dist:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - nofx-network
    depends_on:
      - nofx

volumes:
  frontend-dist:

networks:
  nofx-network:
    driver: bridge

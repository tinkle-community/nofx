export type Language = 'en' | 'zh';

export const translations = {
  en: {
    // Header
    appTitle: 'NOFX',
    subtitle: 'Multi-AI Model Trading Platform',
    aiTraders: 'AI Traders',
    details: 'Details',
    tradingPanel: 'Trading Panel',
    competition: 'Competition',
    running: 'RUNNING',
    stopped: 'STOPPED',
    adminMode: 'Admin Mode',
    logout: 'Logout',
    switchTrader: 'Switch Trader:',
    view: 'View',

    // Footer
    footerTitle: 'NOFX - AI Trading System',
    footerWarning: '‚ö†Ô∏è Trading involves risk. Use at your own discretion.',

    // Stats Cards
    totalEquity: 'Total Equity',
    availableBalance: 'Available Balance',
    totalPnL: 'Total P&L',
    positions: 'Positions',
    margin: 'Margin',
    free: 'Free',

    // Positions Table
    currentPositions: 'Current Positions',
    active: 'Active',
    symbol: 'Symbol',
    side: 'Side',
    entryPrice: 'Entry Price',
    markPrice: 'Mark Price',
    quantity: 'Quantity',
    positionValue: 'Position Value',
    leverage: 'Leverage',
    unrealizedPnL: 'Unrealized P&L',
    liqPrice: 'Liq. Price',
    long: 'LONG',
    short: 'SHORT',
    noPositions: 'No Positions',
    noActivePositions: 'No active trading positions',

    // Recent Decisions
    recentDecisions: 'Recent Decisions',
    lastCycles: 'Last {count} trading cycles',
    noDecisionsYet: 'No Decisions Yet',
    aiDecisionsWillAppear: 'AI trading decisions will appear here',
    cycle: 'Cycle',
    success: 'Success',
    failed: 'Failed',
    inputPrompt: 'Input Prompt',
    aiThinking: 'AI Chain of Thought',
    collapse: 'Collapse',
    expand: 'Expand',

    // Equity Chart
    accountEquityCurve: 'Account Equity Curve',
    noHistoricalData: 'No Historical Data',
    dataWillAppear: 'Equity curve will appear after running a few cycles',
    initialBalance: 'Initial Balance',
    currentEquity: 'Current Equity',
    historicalCycles: 'Historical Cycles',
    displayRange: 'Display Range',
    recent: 'Recent',
    allData: 'All Data',
    cycles: 'Cycles',
    
    // Comparison Chart
    comparisonMode: 'Comparison Mode',
    dataPoints: 'Data Points',
    currentGap: 'Current Gap',
    count: '{count} pts',

    // Competition Page
    aiCompetition: 'AI Competition',
    traders: 'traders',
    liveBattle: 'Live Battle',
    realTimeBattle: 'Real-time Battle',
    leader: 'Leader',
    leaderboard: 'Leaderboard',
    live: 'LIVE',
    realTime: 'LIVE',
    performanceComparison: 'Performance Comparison',
    realTimePnL: 'Real-time PnL %',
    realTimePnLPercent: 'Real-time PnL %',
    headToHead: 'Head-to-Head Battle',
    leadingBy: 'Leading by {gap}%',
    behindBy: 'Behind by {gap}%',
    equity: 'Equity',
    pnl: 'P&L',
    pos: 'Pos',

    // AI Learning
    aiLearning: 'AI Learning & Reflection',
    tradesAnalyzed: '{count} trades analyzed ¬∑ Real-time evolution',
    latestReflection: 'Latest Reflection',
    fullCoT: 'Full Chain of Thought',
    totalTrades: 'Total Trades',
    winRate: 'Win Rate',
    avgWin: 'Avg Win',
    avgLoss: 'Avg Loss',
    profitFactor: 'Profit Factor',
    avgWinDivLoss: 'Avg Win √∑ Avg Loss',
    excellent: 'üî• Excellent - Strong profitability',
    good: '‚úì Good - Stable profits',
    fair: '‚ö†Ô∏è Fair - Needs optimization',
    poor: '‚ùå Poor - Losses exceed gains',
    bestPerformer: 'Best Performer',
    worstPerformer: 'Worst Performer',
    symbolPerformance: 'Symbol Performance',
    tradeHistory: 'Trade History',
    completedTrades: 'Recent {count} completed trades',
    noCompletedTrades: 'No completed trades yet',
    completedTradesWillAppear: 'Completed trades will appear here',
    entry: 'Entry',
    exit: 'Exit',
    stopLoss: 'Stop Loss',
    latest: 'Latest',

    // AI Learning Description
    howAILearns: 'How AI Learns & Evolves',
    aiLearningPoint1: 'Analyzes last 20 trading cycles before each decision',
    aiLearningPoint2: 'Identifies best & worst performing symbols',
    aiLearningPoint3: 'Optimizes position sizing based on win rate',
    aiLearningPoint4: 'Avoids repeating past mistakes',

    // AI Traders Management
    manageAITraders: 'Manage your AI trading bots',
    aiModels: 'AI Models',
    exchanges: 'Exchanges',
    createTrader: 'Create Trader',
    modelConfiguration: 'Model Configuration',
    configured: 'Configured',
    notConfigured: 'Not Configured',
    currentTraders: 'Current Traders',
    noTraders: 'No AI Traders',
    createFirstTrader: 'Create your first AI trader to get started',
    configureModelsFirst: 'Please configure AI models first',
    configureExchangesFirst: 'Please configure exchanges first',
    configureModelsAndExchangesFirst: 'Please configure AI models and exchanges first',
    modelNotConfigured: 'Selected model is not configured',
    exchangeNotConfigured: 'Selected exchange is not configured',
    confirmDeleteTrader: 'Are you sure you want to delete this trader?',
    status: 'Status',
    start: 'Start',
    stop: 'Stop',
    createNewTrader: 'Create New AI Trader',
    selectAIModel: 'Select AI Model',
    selectExchange: 'Select Exchange',
    traderName: 'Trader Name',
    enterTraderName: 'Enter trader name',
    cancel: 'Cancel',
    create: 'Create',
    configureAIModels: 'Configure AI Models',
    configureExchanges: 'Configure Exchanges',
    useTestnet: 'Use Testnet',
    enabled: 'Enabled',
    save: 'Save',
    
    // AI Model Configuration
    officialAPI: 'Official API',
    customAPI: 'Custom API',
    apiKey: 'API Key',
    customAPIURL: 'Custom API URL',
    enterAPIKey: 'Enter API Key',
    enterCustomAPIURL: 'Enter custom API endpoint URL',
    useOfficialAPI: 'Use official API service',
    useCustomAPI: 'Use custom API endpoint',

    // Exchange Configuration
    secretKey: 'Secret Key',
    privateKey: 'Private Key',
    walletAddress: 'Wallet Address',
    user: 'User',
    signer: 'Signer',
    passphrase: 'Passphrase',
    enterPrivateKey: 'Enter Private Key',
    enterWalletAddress: 'Enter Wallet Address',
    enterUser: 'Enter User',
    enterSigner: 'Enter Signer Address',
    enterSecretKey: 'Enter Secret Key',
    enterPassphrase: 'Enter Passphrase (Required for OKX)',
    hyperliquidPrivateKeyDesc: 'Hyperliquid uses private key for trading authentication',
    hyperliquidWalletAddressDesc: 'Wallet address corresponding to the private key',
    testnetDescription: 'Enable to connect to exchange test environment for simulated trading',
    securityWarning: 'Security Warning',
    saveConfiguration: 'Save Configuration',

    // Trader Configuration
    positionMode: 'Position Mode',
    crossMarginMode: 'Cross Margin',
    isolatedMarginMode: 'Isolated Margin',
    crossMarginDescription: 'Cross margin: All positions share account balance as collateral',
    isolatedMarginDescription: 'Isolated margin: Each position manages collateral independently, risk isolation',
    leverageConfiguration: 'Leverage Configuration',
    btcEthLeverage: 'BTC/ETH Leverage',
    altcoinLeverage: 'Altcoin Leverage',
    leverageRecommendation: 'Recommended: BTC/ETH 5-10x, Altcoins 3-5x for risk control',
    tradingSymbols: 'Trading Symbols',
    tradingSymbolsPlaceholder: 'Enter symbols, comma separated (e.g., BTCUSDT,ETHUSDT,SOLUSDT)',
    selectSymbols: 'Select Symbols',
    selectTradingSymbols: 'Select Trading Symbols',
    selectedSymbolsCount: 'Selected {count} symbols',
    clearSelection: 'Clear All',
    confirmSelection: 'Confirm',
    tradingSymbolsDescription: 'Empty = use default symbols. Must end with USDT (e.g., BTCUSDT, ETHUSDT)',
    btcEthLeverageValidation: 'BTC/ETH leverage must be between 1-50x',
    altcoinLeverageValidation: 'Altcoin leverage must be between 1-20x',
    invalidSymbolFormat: 'Invalid symbol format: {symbol}, must end with USDT',

    // Loading & Error
    loading: 'Loading...',
    loadingError: '‚ö†Ô∏è Failed to load AI learning data',
    noCompleteData: 'No complete trading data (needs to complete open ‚Üí close cycle)',

    // AI Traders Page - Additional
    inUse: 'In Use',
    noModelsConfigured: 'No configured AI models',
    noExchangesConfigured: 'No configured exchanges',
    signalSource: 'Signal Source',
    signalSourceConfig: 'Signal Source Configuration',
    coinPoolDescription: 'API endpoint for coin pool data, leave blank to disable this signal source',
    oiTopDescription: 'API endpoint for open interest rankings, leave blank to disable this signal source',
    information: 'Information',
    signalSourceInfo1: '‚Ä¢ Signal source configuration is per-user, each user can set their own URLs',
    signalSourceInfo2: '‚Ä¢ When creating traders, you can choose whether to use these signal sources',
    signalSourceInfo3: '‚Ä¢ Configured URLs will be used to fetch market data and trading signals',
    editAIModel: 'Edit AI Model',
    addAIModel: 'Add AI Model',
    confirmDeleteModel: 'Are you sure you want to delete this AI model configuration?',
    selectModel: 'Select AI Model',
    pleaseSelectModel: 'Please select a model',
    customBaseURL: 'Base URL (Optional)',
    customBaseURLPlaceholder: 'Custom API base URL, e.g.: https://api.openai.com/v1',
    leaveBlankForDefault: 'Leave blank to use default API address',
    modelConfigInfo1: '‚Ä¢ API Key will be encrypted and stored, please ensure it is valid',
    modelConfigInfo2: '‚Ä¢ Base URL is used for custom API server address',
    modelConfigInfo3: '‚Ä¢ After deleting configuration, traders using this model will not work properly',
    saveConfig: 'Save Configuration',
    editExchange: 'Edit Exchange',
    addExchange: 'Add Exchange',
    confirmDeleteExchange: 'Are you sure you want to delete this exchange configuration?',
    pleaseSelectExchange: 'Please select an exchange',
    exchangeConfigWarning1: '‚Ä¢ API keys will be encrypted, recommend using read-only or futures trading permissions',
    exchangeConfigWarning2: '‚Ä¢ Do not grant withdrawal permissions to ensure fund security',
    exchangeConfigWarning3: '‚Ä¢ After deleting configuration, related traders will not be able to trade',
    edit: 'Edit',

    // Error Messages
    createTraderFailed: 'Failed to create trader',
    getTraderConfigFailed: 'Failed to get trader configuration',
    modelConfigNotExist: 'Model configuration does not exist or is not enabled',
    exchangeConfigNotExist: 'Exchange configuration does not exist or is not enabled',
    updateTraderFailed: 'Failed to update trader',
    deleteTraderFailed: 'Failed to delete trader',
    operationFailed: 'Operation failed',
    deleteConfigFailed: 'Failed to delete configuration',
    modelNotExist: 'Model does not exist',
    saveConfigFailed: 'Failed to save configuration',
    exchangeNotExist: 'Exchange does not exist',
    deleteExchangeConfigFailed: 'Failed to delete exchange configuration',
    saveSignalSourceFailed: 'Failed to save signal source configuration',
    
    // Login & Register
    login: 'Sign In',
    register: 'Sign Up',
    email: 'Email',
    password: 'Password',
    confirmPassword: 'Confirm Password',
    emailPlaceholder: 'your@email.com',
    passwordPlaceholder: 'Enter your password',
    confirmPasswordPlaceholder: 'Re-enter your password',
    otpPlaceholder: '000000',
    loginTitle: 'Sign in to your account',
    registerTitle: 'Create a new account',
    loginButton: 'Sign In',
    registerButton: 'Sign Up',
    back: 'Back',
    noAccount: "Don't have an account?",
    hasAccount: 'Already have an account?',
    registerNow: 'Sign up now',
    loginNow: 'Sign in now',
    forgotPassword: 'Forgot password?',
    rememberMe: 'Remember me',
    otpCode: 'OTP Code',
    scanQRCode: 'Scan QR Code',
    enterOTPCode: 'Enter 6-digit OTP code',
    verifyOTP: 'Verify OTP',
    setupTwoFactor: 'Set up two-factor authentication',
    setupTwoFactorDesc: 'Follow the steps below to secure your account with Google Authenticator',
    scanQRCodeInstructions: 'Scan this QR code with Google Authenticator or Authy',
    otpSecret: 'Or enter this secret manually:',
    qrCodeHint: 'QR code (if scanning fails, use the secret below):',
    step1Title: 'Step 1: Install Google Authenticator',
    step1Desc: 'Download and install Google Authenticator from your app store',
    step2Title: 'Step 2: Add account',
    step2Desc: 'Tap "+", then choose "Scan QR code" or "Enter a setup key"',
    step3Title: 'Step 3: Verify setup',
    step3Desc: 'After setup, continue to enter the 6-digit code',
    setupCompleteContinue: 'I have completed setup, continue',
    copy: 'Copy',
    completeRegistration: 'Complete Registration',
    completeRegistrationSubtitle: 'to complete registration',
    loginSuccess: 'Login successful',
    registrationSuccess: 'Registration successful',
    loginFailed: 'Login failed',
    registrationFailed: 'Registration failed',
    verificationFailed: 'OTP verification failed',
    invalidCredentials: 'Invalid email or password',
    passwordMismatch: 'Passwords do not match',
    emailRequired: 'Email is required',
    passwordRequired: 'Password is required',
    invalidEmail: 'Invalid email format',
    passwordTooShort: 'Password must be at least 6 characters',
  },
  zh: {
    // Header
    appTitle: 'NOFX',
    subtitle: 'Â§öAIÊ®°Âûã‰∫§ÊòìÂπ≥Âè∞',
    aiTraders: 'AI‰∫§ÊòìÂëò',
    details: 'ËØ¶ÊÉÖ',
    tradingPanel: '‰∫§ÊòìÈù¢Êùø',
    competition: 'Á´ûËµõ',
    running: 'ËøêË°å‰∏≠',
    stopped: 'Â∑≤ÂÅúÊ≠¢',
    adminMode: 'ÁÆ°ÁêÜÂëòÊ®°Âºè',
    logout: 'ÈÄÄÂá∫',
    switchTrader: 'ÂàáÊç¢‰∫§ÊòìÂëò:',
    view: 'Êü•Áúã',

    // Footer
    footerTitle: 'NOFX - AI‰∫§ÊòìÁ≥ªÁªü',
    footerWarning: '‚ö†Ô∏è ‰∫§ÊòìÊúâÈ£éÈô©ÔºåËØ∑Ë∞®ÊÖé‰ΩøÁî®„ÄÇ',

    // Stats Cards
    totalEquity: 'ÊÄªÂáÄÂÄº',
    availableBalance: 'ÂèØÁî®‰ΩôÈ¢ù',
    totalPnL: 'ÊÄªÁõà‰∫è',
    positions: 'ÊåÅ‰ªì',
    margin: '‰øùËØÅÈáë',
    free: 'Á©∫Èó≤',

    // Positions Table
    currentPositions: 'ÂΩìÂâçÊåÅ‰ªì',
    active: 'Ê¥ªË∑É',
    symbol: 'Â∏ÅÁßç',
    side: 'ÊñπÂêë',
    entryPrice: 'ÂÖ•Âú∫‰ª∑',
    markPrice: 'Ê†áËÆ∞‰ª∑',
    quantity: 'Êï∞Èáè',
    positionValue: '‰ªì‰Ωç‰ª∑ÂÄº',
    leverage: 'Êù†ÊùÜ',
    unrealizedPnL: 'Êú™ÂÆûÁé∞Áõà‰∫è',
    liqPrice: 'Âº∫Âπ≥‰ª∑',
    long: 'Â§öÂ§¥',
    short: 'Á©∫Â§¥',
    noPositions: 'Êó†ÊåÅ‰ªì',
    noActivePositions: 'ÂΩìÂâçÊ≤°ÊúâÊ¥ªË∑ÉÁöÑ‰∫§ÊòìÊåÅ‰ªì',

    // Recent Decisions
    recentDecisions: 'ÊúÄËøëÂÜ≥Á≠ñ',
    lastCycles: 'ÊúÄËøë {count} ‰∏™‰∫§ÊòìÂë®Êúü',
    noDecisionsYet: 'ÊöÇÊó†ÂÜ≥Á≠ñ',
    aiDecisionsWillAppear: 'AI‰∫§ÊòìÂÜ≥Á≠ñÂ∞ÜÊòæÁ§∫Âú®ËøôÈáå',
    cycle: 'Âë®Êúü',
    success: 'ÊàêÂäü',
    failed: 'Â§±Ë¥•',
    inputPrompt: 'ËæìÂÖ•ÊèêÁ§∫',
    aiThinking: 'üí≠ AIÊÄùÁª¥ÈìæÂàÜÊûê',
    collapse: '‚ñº Êî∂Ëµ∑',
    expand: '‚ñ∂ Â±ïÂºÄ',

    // Equity Chart
    accountEquityCurve: 'Ë¥¶Êà∑ÂáÄÂÄºÊõ≤Á∫ø',
    noHistoricalData: 'ÊöÇÊó†ÂéÜÂè≤Êï∞ÊçÆ',
    dataWillAppear: 'ËøêË°åÂá†‰∏™Âë®ÊúüÂêéÂ∞ÜÊòæÁ§∫Êî∂ÁõäÁéáÊõ≤Á∫ø',
    initialBalance: 'ÂàùÂßã‰ΩôÈ¢ù',
    currentEquity: 'ÂΩìÂâçÂáÄÂÄº',
    historicalCycles: 'ÂéÜÂè≤Âë®Êúü',
    displayRange: 'ÊòæÁ§∫ËåÉÂõ¥',
    recent: 'ÊúÄËøë',
    allData: 'ÂÖ®ÈÉ®Êï∞ÊçÆ',
    cycles: '‰∏™',
    
    // Comparison Chart
    comparisonMode: 'ÂØπÊØîÊ®°Âºè',
    dataPoints: 'Êï∞ÊçÆÁÇπÊï∞',
    currentGap: 'ÂΩìÂâçÂ∑ÆË∑ù',
    count: '{count} ‰∏™',

    // Competition Page
    aiCompetition: 'AIÁ´ûËµõ',
    traders: '‰∫§ÊòìÂëò',
    liveBattle: 'ÂÆûÊó∂ÂØπÊàò',
    realTimeBattle: 'ÂÆûÊó∂ÂØπÊàò',
    leader: 'È¢ÜÂÖàËÄÖ',
    leaderboard: 'ÊéíË°åÊ¶ú',
    live: 'ÂÆûÊó∂',
    realTime: 'ÂÆûÊó∂',
    performanceComparison: 'Ë°®Áé∞ÂØπÊØî',
    realTimePnL: 'ÂÆûÊó∂Êî∂ÁõäÁéá',
    realTimePnLPercent: 'ÂÆûÊó∂Êî∂ÁõäÁéá',
    headToHead: 'Ê≠£Èù¢ÂØπÂÜ≥',
    leadingBy: 'È¢ÜÂÖà {gap}%',
    behindBy: 'ËêΩÂêé {gap}%',
    equity: 'ÊùÉÁõä',
    pnl: 'Êî∂Áõä',
    pos: 'ÊåÅ‰ªì',

    // AI Learning
    aiLearning: 'AIÂ≠¶‰π†‰∏éÂèçÊÄù',
    tradesAnalyzed: 'Â∑≤ÂàÜÊûê {count} Á¨î‰∫§Êòì ¬∑ ÂÆûÊó∂ÊºîÂåñ',
    latestReflection: 'ÊúÄÊñ∞ÂèçÊÄù',
    fullCoT: 'üìã ÂÆåÊï¥ÊÄùÁª¥Èìæ',
    totalTrades: 'ÊÄª‰∫§ÊòìÊï∞',
    winRate: 'ËÉúÁéá',
    avgWin: 'Âπ≥ÂùáÁõàÂà©',
    avgLoss: 'Âπ≥Âùá‰∫èÊçü',
    profitFactor: 'Áõà‰∫èÊØî',
    avgWinDivLoss: 'Âπ≥ÂùáÁõàÂà© √∑ Âπ≥Âùá‰∫èÊçü',
    excellent: 'üî• ‰ºòÁßÄ - ÁõàÂà©ËÉΩÂäõÂº∫',
    good: '‚úì ËâØÂ•Ω - Á®≥ÂÆöÁõàÂà©',
    fair: '‚ö†Ô∏è ‰∏ÄËà¨ - ÈúÄË¶Å‰ºòÂåñ',
    poor: '‚ùå ËæÉÂ∑Æ - ‰∫èÊçüË∂ÖËøáÁõàÂà©',
    bestPerformer: 'ÊúÄ‰Ω≥Ë°®Áé∞',
    worstPerformer: 'ÊúÄÂ∑ÆË°®Áé∞',
    symbolPerformance: 'üìä Â∏ÅÁßçË°®Áé∞',
    tradeHistory: 'ÂéÜÂè≤Êàê‰∫§',
    completedTrades: 'ÊúÄËøë {count} Á¨îÂ∑≤ÂÆåÊàê‰∫§Êòì',
    noCompletedTrades: 'ÊöÇÊó†ÂÆåÊàêÁöÑ‰∫§Êòì',
    completedTradesWillAppear: 'Â∑≤ÂÆåÊàêÁöÑ‰∫§ÊòìÂ∞ÜÊòæÁ§∫Âú®ËøôÈáå',
    entry: 'ÂÖ•Âú∫',
    exit: 'Âá∫Âú∫',
    stopLoss: 'Ê≠¢Êçü',
    latest: 'ÊúÄÊñ∞',

    // AI Learning Description
    howAILearns: 'üí° AIÂ¶Ç‰ΩïÂ≠¶‰π†ÂíåËøõÂåñ',
    aiLearningPoint1: 'ÊØèÊ¨°ÂÜ≥Á≠ñÂâçÂàÜÊûêÊúÄËøë20‰∏™‰∫§ÊòìÂë®Êúü',
    aiLearningPoint2: 'ËØÜÂà´Ë°®Áé∞ÊúÄÂ•ΩÂíåÊúÄÂ∑ÆÁöÑÂ∏ÅÁßç',
    aiLearningPoint3: 'Ê†πÊçÆËÉúÁéá‰ºòÂåñ‰ªì‰ΩçÂ§ßÂ∞è',
    aiLearningPoint4: 'ÈÅøÂÖçÈáçÂ§çËøáÂéªÁöÑÈîôËØØ',

    // AI Traders Management
    manageAITraders: 'ÁÆ°ÁêÜÊÇ®ÁöÑAI‰∫§ÊòìÊú∫Âô®‰∫∫',
    aiModels: 'AIÊ®°Âûã',
    exchanges: '‰∫§ÊòìÊâÄ',
    createTrader: 'ÂàõÂª∫‰∫§ÊòìÂëò',
    modelConfiguration: 'Ê®°ÂûãÈÖçÁΩÆ',
    configured: 'Â∑≤ÈÖçÁΩÆ',
    notConfigured: 'Êú™ÈÖçÁΩÆ',
    currentTraders: 'ÂΩìÂâç‰∫§ÊòìÂëò',
    noTraders: 'ÊöÇÊó†AI‰∫§ÊòìÂëò',
    createFirstTrader: 'ÂàõÂª∫ÊÇ®ÁöÑÁ¨¨‰∏Ä‰∏™AI‰∫§ÊòìÂëòÂºÄÂßã‰ΩøÁî®',
    configureModelsFirst: 'ËØ∑ÂÖàÈÖçÁΩÆAIÊ®°Âûã',
    configureExchangesFirst: 'ËØ∑ÂÖàÈÖçÁΩÆ‰∫§ÊòìÊâÄ',
    configureModelsAndExchangesFirst: 'ËØ∑ÂÖàÈÖçÁΩÆAIÊ®°ÂûãÂíå‰∫§ÊòìÊâÄ',
    modelNotConfigured: 'ÊâÄÈÄâÊ®°ÂûãÊú™ÈÖçÁΩÆ',
    exchangeNotConfigured: 'ÊâÄÈÄâ‰∫§ÊòìÊâÄÊú™ÈÖçÁΩÆ',
    confirmDeleteTrader: 'Á°ÆÂÆöË¶ÅÂà†Èô§Ëøô‰∏™‰∫§ÊòìÂëòÂêóÔºü',
    status: 'Áä∂ÊÄÅ',
    start: 'ÂêØÂä®',
    stop: 'ÂÅúÊ≠¢',
    createNewTrader: 'ÂàõÂª∫Êñ∞ÁöÑAI‰∫§ÊòìÂëò',
    selectAIModel: 'ÈÄâÊã©AIÊ®°Âûã',
    selectExchange: 'ÈÄâÊã©‰∫§ÊòìÊâÄ',
    traderName: '‰∫§ÊòìÂëòÂêçÁß∞',
    enterTraderName: 'ËæìÂÖ•‰∫§ÊòìÂëòÂêçÁß∞',
    cancel: 'ÂèñÊ∂à',
    create: 'ÂàõÂª∫',
    configureAIModels: 'ÈÖçÁΩÆAIÊ®°Âûã',
    configureExchanges: 'ÈÖçÁΩÆ‰∫§ÊòìÊâÄ',
    useTestnet: '‰ΩøÁî®ÊµãËØïÁΩë',
    enabled: 'ÂêØÁî®',
    save: '‰øùÂ≠ò',
    
    // AI Model Configuration
    officialAPI: 'ÂÆòÊñπAPI',
    customAPI: 'Ëá™ÂÆö‰πâAPI',
    apiKey: 'APIÂØÜÈí•',
    customAPIURL: 'Ëá™ÂÆö‰πâAPIÂú∞ÂùÄ',
    enterAPIKey: 'ËØ∑ËæìÂÖ•APIÂØÜÈí•',
    enterCustomAPIURL: 'ËØ∑ËæìÂÖ•Ëá™ÂÆö‰πâAPIÁ´ØÁÇπÂú∞ÂùÄ',
    useOfficialAPI: '‰ΩøÁî®ÂÆòÊñπAPIÊúçÂä°',
    useCustomAPI: '‰ΩøÁî®Ëá™ÂÆö‰πâAPIÁ´ØÁÇπ',

    // Exchange Configuration
    secretKey: 'ÂØÜÈí•',
    privateKey: 'ÁßÅÈí•',
    walletAddress: 'Èí±ÂåÖÂú∞ÂùÄ',
    user: 'Áî®Êà∑Âêç',
    signer: 'Á≠æÂêçËÄÖ',
    passphrase: 'Âè£‰ª§',
    enterSecretKey: 'ËæìÂÖ•ÂØÜÈí•',
    enterPrivateKey: 'ËæìÂÖ•ÁßÅÈí•',
    enterWalletAddress: 'ËæìÂÖ•Èí±ÂåÖÂú∞ÂùÄ',
    enterUser: 'ËæìÂÖ•Áî®Êà∑Âêç',
    enterSigner: 'ËæìÂÖ•Á≠æÂêçËÄÖÂú∞ÂùÄ',
    enterPassphrase: 'ËæìÂÖ•Passphrase (OKXÂøÖÂ°´)',
    hyperliquidPrivateKeyDesc: 'Hyperliquid ‰ΩøÁî®ÁßÅÈí•ËøõË°å‰∫§ÊòìËÆ§ËØÅ',
    hyperliquidWalletAddressDesc: '‰∏éÁßÅÈí•ÂØπÂ∫îÁöÑÈí±ÂåÖÂú∞ÂùÄ',
    testnetDescription: 'ÂêØÁî®ÂêéÂ∞ÜËøûÊé•Âà∞‰∫§ÊòìÊâÄÊµãËØïÁéØÂ¢ÉÔºåÁî®‰∫éÊ®°Êãü‰∫§Êòì',
    securityWarning: 'ÂÆâÂÖ®ÊèêÁ§∫',
    saveConfiguration: '‰øùÂ≠òÈÖçÁΩÆ',

    // Trader Configuration
    positionMode: '‰ªì‰ΩçÊ®°Âºè',
    crossMarginMode: 'ÂÖ®‰ªìÊ®°Âºè',
    isolatedMarginMode: 'ÈÄê‰ªìÊ®°Âºè',
    crossMarginDescription: 'ÂÖ®‰ªìÊ®°ÂºèÔºöÊâÄÊúâ‰ªì‰ΩçÂÖ±‰∫´Ë¥¶Êà∑‰ΩôÈ¢ù‰Ωú‰∏∫‰øùËØÅÈáë',
    isolatedMarginDescription: 'ÈÄê‰ªìÊ®°ÂºèÔºöÊØè‰∏™‰ªì‰ΩçÁã¨Á´ãÁÆ°ÁêÜ‰øùËØÅÈáëÔºåÈ£éÈô©ÈöîÁ¶ª',
    leverageConfiguration: 'Êù†ÊùÜÈÖçÁΩÆ',
    btcEthLeverage: 'BTC/ETHÊù†ÊùÜ',
    altcoinLeverage: 'Â±±ÂØ®Â∏ÅÊù†ÊùÜ',
    leverageRecommendation: 'Êé®ËçêÔºöBTC/ETH 5-10ÂÄçÔºåÂ±±ÂØ®Â∏Å 3-5ÂÄçÔºåÊéßÂà∂È£éÈô©',
    tradingSymbols: '‰∫§ÊòìÂ∏ÅÁßç',
    tradingSymbolsPlaceholder: 'ËæìÂÖ•Â∏ÅÁßçÔºåÈÄóÂè∑ÂàÜÈöîÔºàÂ¶ÇÔºöBTCUSDT,ETHUSDT,SOLUSDTÔºâ',
    selectSymbols: 'ÈÄâÊã©Â∏ÅÁßç',
    selectTradingSymbols: 'ÈÄâÊã©‰∫§ÊòìÂ∏ÅÁßç',
    selectedSymbolsCount: 'Â∑≤ÈÄâÊã© {count} ‰∏™Â∏ÅÁßç',
    clearSelection: 'Ê∏ÖÁ©∫ÈÄâÊã©',
    confirmSelection: 'Á°ÆËÆ§ÈÄâÊã©',
    tradingSymbolsDescription: 'ÁïôÁ©∫ = ‰ΩøÁî®ÈªòËÆ§Â∏ÅÁßç„ÄÇÂøÖÈ°ª‰ª•USDTÁªìÂ∞æÔºàÂ¶ÇÔºöBTCUSDT, ETHUSDTÔºâ',
    btcEthLeverageValidation: 'BTC/ETHÊù†ÊùÜÂøÖÈ°ªÂú®1-50ÂÄç‰πãÈó¥',
    altcoinLeverageValidation: 'Â±±ÂØ®Â∏ÅÊù†ÊùÜÂøÖÈ°ªÂú®1-20ÂÄç‰πãÈó¥',
    invalidSymbolFormat: 'Êó†ÊïàÁöÑÂ∏ÅÁßçÊ†ºÂºèÔºö{symbol}ÔºåÂøÖÈ°ª‰ª•USDTÁªìÂ∞æ',

    // Loading & Error
    loading: 'Âä†ËΩΩ‰∏≠...',
    loadingError: '‚ö†Ô∏è Âä†ËΩΩAIÂ≠¶‰π†Êï∞ÊçÆÂ§±Ë¥•',
    noCompleteData: 'ÊöÇÊó†ÂÆåÊï¥‰∫§ÊòìÊï∞ÊçÆÔºàÈúÄË¶ÅÂÆåÊàêÂºÄ‰ªì‚ÜíÂπ≥‰ªìÁöÑÂÆåÊï¥Âë®ÊúüÔºâ',

    // AI Traders Page - Additional
    inUse: 'Ê≠£Âú®‰ΩøÁî®',
    noModelsConfigured: 'ÊöÇÊó†Â∑≤ÈÖçÁΩÆÁöÑAIÊ®°Âûã',
    noExchangesConfigured: 'ÊöÇÊó†Â∑≤ÈÖçÁΩÆÁöÑ‰∫§ÊòìÊâÄ',
    signalSource: '‰ø°Âè∑Ê∫ê',
    signalSourceConfig: '‰ø°Âè∑Ê∫êÈÖçÁΩÆ',
    coinPoolDescription: 'Áî®‰∫éËé∑ÂèñÂ∏ÅÁßçÊ±†Êï∞ÊçÆÁöÑAPIÂú∞ÂùÄÔºåÁïôÁ©∫Âàô‰∏ç‰ΩøÁî®Ê≠§‰ø°Âè∑Ê∫ê',
    oiTopDescription: 'Áî®‰∫éËé∑ÂèñÊåÅ‰ªìÈáèÊéíË°åÊï∞ÊçÆÁöÑAPIÂú∞ÂùÄÔºåÁïôÁ©∫Âàô‰∏ç‰ΩøÁî®Ê≠§‰ø°Âè∑Ê∫ê',
    information: 'ËØ¥Êòé',
    signalSourceInfo1: '‚Ä¢ ‰ø°Âè∑Ê∫êÈÖçÁΩÆ‰∏∫Áî®Êà∑Á∫ßÂà´ÔºåÊØè‰∏™Áî®Êà∑ÂèØ‰ª•ËÆæÁΩÆËá™Â∑±ÁöÑ‰ø°Âè∑Ê∫êURL',
    signalSourceInfo2: '‚Ä¢ Âú®ÂàõÂª∫‰∫§ÊòìÂëòÊó∂ÂèØ‰ª•ÈÄâÊã©ÊòØÂê¶‰ΩøÁî®Ëøô‰∫õ‰ø°Âè∑Ê∫ê',
    signalSourceInfo3: '‚Ä¢ ÈÖçÁΩÆÁöÑURLÂ∞ÜÁî®‰∫éËé∑ÂèñÂ∏ÇÂú∫Êï∞ÊçÆÂíå‰∫§Êòì‰ø°Âè∑',
    editAIModel: 'ÁºñËæëAIÊ®°Âûã',
    addAIModel: 'Ê∑ªÂä†AIÊ®°Âûã',
    confirmDeleteModel: 'Á°ÆÂÆöË¶ÅÂà†Èô§Ê≠§AIÊ®°ÂûãÈÖçÁΩÆÂêóÔºü',
    selectModel: 'ÈÄâÊã©AIÊ®°Âûã',
    pleaseSelectModel: 'ËØ∑ÈÄâÊã©Ê®°Âûã',
    customBaseURL: 'Base URL (ÂèØÈÄâ)',
    customBaseURLPlaceholder: 'Ëá™ÂÆö‰πâAPIÂü∫Á°ÄURLÔºåÂ¶Ç: https://api.openai.com/v1',
    leaveBlankForDefault: 'ÁïôÁ©∫Âàô‰ΩøÁî®ÈªòËÆ§APIÂú∞ÂùÄ',
    modelConfigInfo1: '‚Ä¢ API KeyÂ∞ÜË¢´Âä†ÂØÜÂ≠òÂÇ®ÔºåËØ∑Á°Æ‰øùÂØÜÈí•ÊúâÊïà',
    modelConfigInfo2: '‚Ä¢ Base URLÁî®‰∫éËá™ÂÆö‰πâAPIÊúçÂä°Âô®Âú∞ÂùÄ',
    modelConfigInfo3: '‚Ä¢ Âà†Èô§ÈÖçÁΩÆÂêéÔºå‰ΩøÁî®Ê≠§Ê®°ÂûãÁöÑ‰∫§ÊòìÂëòÂ∞ÜÊó†Ê≥ïÊ≠£Â∏∏Â∑•‰Ωú',
    saveConfig: '‰øùÂ≠òÈÖçÁΩÆ',
    editExchange: 'ÁºñËæë‰∫§ÊòìÊâÄ',
    addExchange: 'Ê∑ªÂä†‰∫§ÊòìÊâÄ',
    confirmDeleteExchange: 'Á°ÆÂÆöË¶ÅÂà†Èô§Ê≠§‰∫§ÊòìÊâÄÈÖçÁΩÆÂêóÔºü',
    pleaseSelectExchange: 'ËØ∑ÈÄâÊã©‰∫§ÊòìÊâÄ',
    exchangeConfigWarning1: '‚Ä¢ APIÂØÜÈí•Â∞ÜË¢´Âä†ÂØÜÂ≠òÂÇ®ÔºåÂª∫ËÆÆ‰ΩøÁî®Âè™ËØªÊàñÊúüË¥ß‰∫§ÊòìÊùÉÈôê',
    exchangeConfigWarning2: '‚Ä¢ ‰∏çË¶ÅÊéà‰∫àÊèêÁé∞ÊùÉÈôêÔºåÁ°Æ‰øùËµÑÈáëÂÆâÂÖ®',
    exchangeConfigWarning3: '‚Ä¢ Âà†Èô§ÈÖçÁΩÆÂêéÔºåÁõ∏ÂÖ≥‰∫§ÊòìÂëòÂ∞ÜÊó†Ê≥ïÊ≠£Â∏∏‰∫§Êòì',
    edit: 'ÁºñËæë',

    // Error Messages
    createTraderFailed: 'ÂàõÂª∫‰∫§ÊòìÂëòÂ§±Ë¥•',
    getTraderConfigFailed: 'Ëé∑Âèñ‰∫§ÊòìÂëòÈÖçÁΩÆÂ§±Ë¥•',
    modelConfigNotExist: 'AIÊ®°ÂûãÈÖçÁΩÆ‰∏çÂ≠òÂú®ÊàñÊú™ÂêØÁî®',
    exchangeConfigNotExist: '‰∫§ÊòìÊâÄÈÖçÁΩÆ‰∏çÂ≠òÂú®ÊàñÊú™ÂêØÁî®',
    updateTraderFailed: 'Êõ¥Êñ∞‰∫§ÊòìÂëòÂ§±Ë¥•',
    deleteTraderFailed: 'Âà†Èô§‰∫§ÊòìÂëòÂ§±Ë¥•',
    operationFailed: 'Êìç‰ΩúÂ§±Ë¥•',
    deleteConfigFailed: 'Âà†Èô§ÈÖçÁΩÆÂ§±Ë¥•',
    modelNotExist: 'Ê®°Âûã‰∏çÂ≠òÂú®',
    saveConfigFailed: '‰øùÂ≠òÈÖçÁΩÆÂ§±Ë¥•',
    exchangeNotExist: '‰∫§ÊòìÊâÄ‰∏çÂ≠òÂú®',
    deleteExchangeConfigFailed: 'Âà†Èô§‰∫§ÊòìÊâÄÈÖçÁΩÆÂ§±Ë¥•',
    saveSignalSourceFailed: '‰øùÂ≠ò‰ø°Âè∑Ê∫êÈÖçÁΩÆÂ§±Ë¥•',
    
    // Login & Register
    login: 'ÁôªÂΩï',
    register: 'Ê≥®ÂÜå',
    email: 'ÈÇÆÁÆ±',
    password: 'ÂØÜÁ†Å',
    confirmPassword: 'Á°ÆËÆ§ÂØÜÁ†Å',
    emailPlaceholder: 'ËØ∑ËæìÂÖ•ÈÇÆÁÆ±Âú∞ÂùÄ',
    passwordPlaceholder: 'ËØ∑ËæìÂÖ•ÂØÜÁ†ÅÔºàËá≥Â∞ë6‰ΩçÔºâ',
    confirmPasswordPlaceholder: 'ËØ∑ÂÜçÊ¨°ËæìÂÖ•ÂØÜÁ†Å',
    otpPlaceholder: '000000',
    loginTitle: 'ÁôªÂΩïÂà∞ÊÇ®ÁöÑË¥¶Êà∑',
    registerTitle: 'ÂàõÂª∫Êñ∞Ë¥¶Êà∑',
    loginButton: 'ÁôªÂΩï',
    registerButton: 'Ê≥®ÂÜå',
    back: 'ËøîÂõû',
    noAccount: 'ËøòÊ≤°ÊúâË¥¶Êà∑Ôºü',
    hasAccount: 'Â∑≤ÊúâË¥¶Êà∑Ôºü',
    registerNow: 'Á´ãÂç≥Ê≥®ÂÜå',
    loginNow: 'Á´ãÂç≥ÁôªÂΩï',
    forgotPassword: 'ÂøòËÆ∞ÂØÜÁ†ÅÔºü',
    rememberMe: 'ËÆ∞‰ΩèÊàë',
    otpCode: 'OTPÈ™åËØÅÁ†Å',
    scanQRCode: 'Êâ´Êèè‰∫åÁª¥Á†Å',
    enterOTPCode: 'ËæìÂÖ•6‰ΩçOTPÈ™åËØÅÁ†Å',
    verifyOTP: 'È™åËØÅOTP',
    setupTwoFactor: 'ËÆæÁΩÆÂèåÂõ†Á¥†ËÆ§ËØÅ',
    setupTwoFactorDesc: 'ËØ∑Êåâ‰ª•‰∏ãÊ≠•È™§ËÆæÁΩÆGoogleÈ™åËØÅÂô®‰ª•‰øùÊä§ÊÇ®ÁöÑË¥¶Êà∑ÂÆâÂÖ®',
    scanQRCodeInstructions: '‰ΩøÁî®Google AuthenticatorÊàñAuthyÊâ´ÊèèÊ≠§‰∫åÁª¥Á†Å',
    otpSecret: 'ÊàñÊâãÂä®ËæìÂÖ•Ê≠§ÂØÜÈí•Ôºö',
    qrCodeHint: '‰∫åÁª¥Á†ÅÔºàÂ¶ÇÊûúÊó†Ê≥ïÊâ´ÊèèÔºåËØ∑‰ΩøÁî®‰∏ãÊñπÂØÜÈí•ÔºâÔºö',
    step1Title: 'Ê≠•È™§1Ôºö‰∏ãËΩΩGoogle Authenticator',
    step1Desc: 'Âú®ÊâãÊú∫Â∫îÁî®ÂïÜÂ∫ó‰∏ãËΩΩÂπ∂ÂÆâË£ÖGoogle AuthenticatorÂ∫îÁî®',
    step2Title: 'Ê≠•È™§2ÔºöÊ∑ªÂä†Ë¥¶Êà∑',
    step2Desc: 'Âú®Â∫îÁî®‰∏≠ÁÇπÂáª‚Äú+‚ÄùÔºåÈÄâÊã©‚ÄúÊâ´Êèè‰∫åÁª¥Á†Å‚ÄùÊàñ‚ÄúÊâãÂä®ËæìÂÖ•ÂØÜÈí•‚Äù',
    step3Title: 'Ê≠•È™§3ÔºöÈ™åËØÅËÆæÁΩÆ',
    step3Desc: 'ËÆæÁΩÆÂÆåÊàêÂêéÔºåÁÇπÂáª‰∏ãÊñπÊåâÈíÆËæìÂÖ•6‰ΩçÈ™åËØÅÁ†Å',
    setupCompleteContinue: 'ÊàëÂ∑≤ÂÆåÊàêËÆæÁΩÆÔºåÁªßÁª≠',
    copy: 'Â§çÂà∂',
    completeRegistration: 'ÂÆåÊàêÊ≥®ÂÜå',
    completeRegistrationSubtitle: '‰ª•ÂÆåÊàêÊ≥®ÂÜå',
    loginSuccess: 'ÁôªÂΩïÊàêÂäü',
    registrationSuccess: 'Ê≥®ÂÜåÊàêÂäü',
    loginFailed: 'ÁôªÂΩïÂ§±Ë¥•',
    registrationFailed: 'Ê≥®ÂÜåÂ§±Ë¥•',
    verificationFailed: 'OTPÈ™åËØÅÂ§±Ë¥•',
    invalidCredentials: 'ÈÇÆÁÆ±ÊàñÂØÜÁ†ÅÈîôËØØ',
    passwordMismatch: '‰∏§Ê¨°ËæìÂÖ•ÁöÑÂØÜÁ†Å‰∏ç‰∏ÄËá¥',
    emailRequired: 'ËØ∑ËæìÂÖ•ÈÇÆÁÆ±',
    passwordRequired: 'ËØ∑ËæìÂÖ•ÂØÜÁ†Å',
    invalidEmail: 'ÈÇÆÁÆ±Ê†ºÂºè‰∏çÊ≠£Á°Æ',
    passwordTooShort: 'ÂØÜÁ†ÅËá≥Â∞ëÈúÄË¶Å6‰∏™Â≠óÁ¨¶',
  }
};

export function t(key: string, lang: Language, params?: Record<string, string | number>): string {
  let text = translations[lang][key as keyof typeof translations['en']] || key;

  // Replace parameters like {count}, {gap}, etc.
  if (params) {
    Object.entries(params).forEach(([param, value]) => {
      text = text.replace(`{${param}}`, String(value));
    });
  }

  return text;
}

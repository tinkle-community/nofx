export type Language = 'en' | 'zh';

export const translations = {
  en: {
    // Header
    appTitle: 'AI Trading System',
    subtitle: 'Multi-AI Model Trading Platform',
    aiTraders: 'AI Traders',
    details: 'Details',
    tradingPanel: 'Trading Panel',
    competition: 'Competition',
    running: 'RUNNING',
    stopped: 'STOPPED',
    adminMode: 'Admin Mode',
    logout: 'Logout',
    switchTrader: 'Switch Trader:',
    view: 'View',

    // Footer
    footerTitle: 'NOFX - AI Trading System',
    footerWarning: '‚ö†Ô∏è Trading involves risk. Use at your own discretion.',

    // Stats Cards
    totalEquity: 'Total Equity',
    availableBalance: 'Available Balance',
    totalPnL: 'Total P&L',
    positions: 'Positions',
    margin: 'Margin',
    free: 'Free',

    // Positions Table
    currentPositions: 'Current Positions',
    active: 'Active',
    symbol: 'Symbol',
    side: 'Side',
    entryPrice: 'Entry Price',
    markPrice: 'Mark Price',
    quantity: 'Quantity',
    positionValue: 'Position Value',
    leverage: 'Leverage',
    unrealizedPnL: 'Unrealized P&L',
    liqPrice: 'Liq. Price',
    long: 'LONG',
    short: 'SHORT',
    noPositions: 'No Positions',
    noActivePositions: 'No active trading positions',

    // Recent Decisions
    recentDecisions: 'Recent Decisions',
    lastCycles: 'Last {count} trading cycles',
    noDecisionsYet: 'No Decisions Yet',
    aiDecisionsWillAppear: 'AI trading decisions will appear here',
    cycle: 'Cycle',
    success: 'Success',
    failed: 'Failed',
    inputPrompt: 'Input Prompt',
    aiThinking: 'AI Chain of Thought',
    collapse: 'Collapse',
    expand: 'Expand',

    // Equity Chart
    accountEquityCurve: 'Account Equity Curve',
    noHistoricalData: 'No Historical Data',
    dataWillAppear: 'Equity curve will appear after running a few cycles',
    initialBalance: 'Initial Balance',
    currentEquity: 'Current Equity',
    historicalCycles: 'Historical Cycles',
    displayRange: 'Display Range',
    recent: 'Recent',
    allData: 'All Data',
    cycles: 'Cycles',

    // Competition Page
    aiCompetition: 'AI Competition',
    traders: 'traders',
    liveBattle: 'Qwen vs DeepSeek ¬∑ Live Battle',
    realTimeBattle: 'Real-time Battle',
    leader: 'Leader',
    leaderboard: 'Leaderboard',
    live: 'LIVE',
    realTime: 'LIVE',
    performanceComparison: 'Performance Comparison',
    realTimePnL: 'Real-time PnL %',
    realTimePnLPercent: 'Real-time PnL %',
    headToHead: 'Head-to-Head Battle',
    leadingBy: 'Leading by {gap}%',
    behindBy: 'Behind by {gap}%',
    equity: 'Equity',
    pnl: 'P&L',
    pos: 'Pos',

    // AI Learning
    aiLearning: 'AI Learning & Reflection',
    tradesAnalyzed: '{count} trades analyzed ¬∑ Real-time evolution',
    latestReflection: 'Latest Reflection',
    fullCoT: 'Full Chain of Thought',
    totalTrades: 'Total Trades',
    winRate: 'Win Rate',
    avgWin: 'Avg Win',
    avgLoss: 'Avg Loss',
    profitFactor: 'Profit Factor',
    avgWinDivLoss: 'Avg Win √∑ Avg Loss',
    excellent: 'üî• Excellent - Strong profitability',
    good: '‚úì Good - Stable profits',
    fair: '‚ö†Ô∏è Fair - Needs optimization',
    poor: '‚ùå Poor - Losses exceed gains',
    bestPerformer: 'Best Performer',
    worstPerformer: 'Worst Performer',
    symbolPerformance: 'Symbol Performance',
    tradeHistory: 'Trade History',
    completedTrades: 'Recent {count} completed trades',
    noCompletedTrades: 'No completed trades yet',
    completedTradesWillAppear: 'Completed trades will appear here',
    entry: 'Entry',
    exit: 'Exit',
    stopLoss: 'Stop Loss',
    latest: 'Latest',

    // AI Learning Description
    howAILearns: 'How AI Learns & Evolves',
    aiLearningPoint1: 'Analyzes last 20 trading cycles before each decision',
    aiLearningPoint2: 'Identifies best & worst performing symbols',
    aiLearningPoint3: 'Optimizes position sizing based on win rate',
    aiLearningPoint4: 'Avoids repeating past mistakes',

    // AI Traders Management
    manageAITraders: 'Manage your AI trading bots',
    aiModels: 'AI Models',
    exchanges: 'Exchanges',
    createTrader: 'Create Trader',
    modelConfiguration: 'Model Configuration',
    configured: 'Configured',
    notConfigured: 'Not Configured',
    inUse: 'In Use',
    noModelsConfigured: 'No AI models configured',
    noExchangesConfigured: 'No exchanges configured',
    currentTraders: 'Current Traders',
    noTraders: 'No AI Traders',
    createFirstTrader: 'Create your first AI trader to get started',
    configureModelsFirst: 'Please configure AI models first',
    configureExchangesFirst: 'Please configure exchanges first',
    configureModelsAndExchangesFirst: 'Please configure AI models and exchanges first',
    modelNotConfigured: 'Selected model is not configured',
    exchangeNotConfigured: 'Selected exchange is not configured',
    confirmDeleteTrader: 'Are you sure you want to delete this trader?',
    confirmDeleteModel: 'Are you sure you want to delete this AI model configuration?',
    confirmDeleteExchange: 'Are you sure you want to delete this exchange configuration?',
    status: 'Status',
    start: 'Start',
    stop: 'Stop',
    createNewTrader: 'Create New AI Trader',
    selectAIModel: 'Select AI Model',
    selectExchange: 'Select Exchange',
    selectModel: 'Please select a model',
    selectExchangeOption: 'Please select an exchange',
    traderName: 'Trader Name',
    enterTraderName: 'Enter trader name',
    cancel: 'Cancel',
    create: 'Create',
    configureAIModels: 'Configure AI Models',
    configureExchanges: 'Configure Exchanges',
    useTestnet: 'Use Testnet',
    enabled: 'Enabled',
    save: 'Save',
    deleteConfig: 'Delete Config',
    editAIModel: 'Edit AI Model',
    addAIModel: 'Add AI Model',
    editExchange: 'Edit Exchange',
    addExchange: 'Add Exchange',
    initialFunds: 'Initial Funds (USDT)',
    marginMode: 'Margin Mode',
    crossMargin: 'Cross Margin',
    isolatedMargin: 'Isolated Margin',
    crossMarginDesc: 'Cross Margin: All positions share account balance as margin',
    isolatedMarginDesc: 'Isolated Margin: Each position manages margin independently, risk isolated',
    advancedSettings: 'Advanced Settings',
    customStrategy: 'Custom Trading Strategy',
    customStrategyOptional: 'Custom Trading Strategy (Optional)',
    customStrategyPlaceholder: 'E.g.: Focus on mainstream coins BTC/ETH/SOL, avoid MEME coins. Use conservative strategy, single position no more than 30% of account...',
    customStrategyDesc: 'Enter custom trading strategies and rules to serve as additional guidance for the AI trader. Leave blank to use default strategy.',
    overrideBaseStrategy: 'Override Base Strategy',
    overrideBaseStrategyWarning: '‚ö†Ô∏è Warning: Checking this will completely use your custom strategy and no longer use the system default risk control and trading logic. This may increase trading risk. Use this option only when you fully understand the trading logic.',
    privateKey: 'Private Key (without 0x prefix)',
    walletAddress: 'Wallet Address',
    userAddress: 'User Address',
    signerAddress: 'Signer Address',
    enterApiKey: 'Enter API Key',
    binanceApiKey: 'Enter Binance API Key',
    binanceSecretKey: 'Enter Binance Secret Key',
    hyperliquidPrivateKey: 'Enter Ethereum private key',
    hyperliquidWalletAddr: 'Enter Ethereum wallet address',
    asterUser: 'Enter Aster user address',
    asterSigner: 'Enter Aster signer address',
    asterPrivateKey: 'Enter Aster private key',
    createTraderFailed: 'Failed to create trader',
    deleteTraderFailed: 'Failed to delete trader',
    deleteConfigFailed: 'Failed to delete configuration',
    saveConfigFailed: 'Failed to save configuration',
    deleteExchangeConfigFailed: 'Failed to delete exchange configuration',
    saveExchangeConfigFailed: 'Failed to save exchange configuration',
    operationFailed: 'Operation failed',

    // Loading & Error
    loading: 'Loading...',
    loadingError: '‚ö†Ô∏è Failed to load AI learning data',
    noCompleteData: 'No complete trading data (needs to complete open ‚Üí close cycle)',
    
    // Login & Register
    login: 'Sign In',
    register: 'Sign Up',
    email: 'Email',
    password: 'Password',
    confirmPassword: 'Confirm Password',
    emailPlaceholder: 'your@email.com',
    passwordPlaceholder: 'Enter your password',
    confirmPasswordPlaceholder: 'Re-enter your password',
    otpPlaceholder: '000000',
    loginTitle: 'Sign in to your account',
    registerTitle: 'Create a new account',
    loginButton: 'Sign In',
    registerButton: 'Sign Up',
    back: 'Back',
    noAccount: "Don't have an account?",
    hasAccount: 'Already have an account?',
    registerNow: 'Sign up now',
    loginNow: 'Sign in now',
    forgotPassword: 'Forgot password?',
    rememberMe: 'Remember me',
    otpCode: 'OTP Code',
    scanQRCode: 'Scan QR Code',
    enterOTPCode: 'Enter 6-digit OTP code',
    verifyOTP: 'Verify OTP',
    setupTwoFactor: 'Set up two-factor authentication',
    setupTwoFactorDesc: 'Follow the steps below to secure your account with Google Authenticator',
    scanQRCodeInstructions: 'Scan this QR code with Google Authenticator or Authy',
    otpSecret: 'Or enter this secret manually:',
    qrCodeHint: 'QR code (if scanning fails, use the secret below):',
    step1Title: 'Step 1: Install Google Authenticator',
    step1Desc: 'Download and install Google Authenticator from your app store',
    step2Title: 'Step 2: Add account',
    step2Desc: 'Tap "+", then choose "Scan QR code" or "Enter a setup key"',
    step3Title: 'Step 3: Verify setup',
    step3Desc: 'After setup, continue to enter the 6-digit code',
    setupCompleteContinue: 'I have completed setup, continue',
    copy: 'Copy',
    completeRegistration: 'Complete Registration',
    completeRegistrationSubtitle: 'to complete registration',
    loginSuccess: 'Login successful',
    registrationSuccess: 'Registration successful',
    loginFailed: 'Login failed',
    registrationFailed: 'Registration failed',
    verificationFailed: 'OTP verification failed',
    invalidCredentials: 'Invalid email or password',
    passwordMismatch: 'Passwords do not match',
    emailRequired: 'Email is required',
    passwordRequired: 'Password is required',
    invalidEmail: 'Invalid email format',
    passwordTooShort: 'Password must be at least 6 characters',
  },
  zh: {
    // Header
    appTitle: 'AI‰∫§ÊòìÁ≥ªÁªü',
    subtitle: 'Â§öAIÊ®°Âûã‰∫§ÊòìÂπ≥Âè∞',
    aiTraders: 'AI‰∫§ÊòìÂëò',
    details: 'ËØ¶ÊÉÖ',
    tradingPanel: '‰∫§ÊòìÈù¢Êùø',
    competition: 'Á´ûËµõ',
    running: 'ËøêË°å‰∏≠',
    stopped: 'Â∑≤ÂÅúÊ≠¢',
    adminMode: 'ÁÆ°ÁêÜÂëòÊ®°Âºè',
    logout: 'ÈÄÄÂá∫',
    switchTrader: 'ÂàáÊç¢‰∫§ÊòìÂëò:',
    view: 'Êü•Áúã',

    // Footer
    footerTitle: 'NOFX - AI‰∫§ÊòìÁ≥ªÁªü',
    footerWarning: '‚ö†Ô∏è ‰∫§ÊòìÊúâÈ£éÈô©ÔºåËØ∑Ë∞®ÊÖé‰ΩøÁî®„ÄÇ',

    // Stats Cards
    totalEquity: 'ÊÄªÂáÄÂÄº',
    availableBalance: 'ÂèØÁî®‰ΩôÈ¢ù',
    totalPnL: 'ÊÄªÁõà‰∫è',
    positions: 'ÊåÅ‰ªì',
    margin: '‰øùËØÅÈáë',
    free: 'Á©∫Èó≤',

    // Positions Table
    currentPositions: 'ÂΩìÂâçÊåÅ‰ªì',
    active: 'Ê¥ªË∑É',
    symbol: 'Â∏ÅÁßç',
    side: 'ÊñπÂêë',
    entryPrice: 'ÂÖ•Âú∫‰ª∑',
    markPrice: 'Ê†áËÆ∞‰ª∑',
    quantity: 'Êï∞Èáè',
    positionValue: '‰ªì‰Ωç‰ª∑ÂÄº',
    leverage: 'Êù†ÊùÜ',
    unrealizedPnL: 'Êú™ÂÆûÁé∞Áõà‰∫è',
    liqPrice: 'Âº∫Âπ≥‰ª∑',
    long: 'Â§öÂ§¥',
    short: 'Á©∫Â§¥',
    noPositions: 'Êó†ÊåÅ‰ªì',
    noActivePositions: 'ÂΩìÂâçÊ≤°ÊúâÊ¥ªË∑ÉÁöÑ‰∫§ÊòìÊåÅ‰ªì',

    // Recent Decisions
    recentDecisions: 'ÊúÄËøëÂÜ≥Á≠ñ',
    lastCycles: 'ÊúÄËøë {count} ‰∏™‰∫§ÊòìÂë®Êúü',
    noDecisionsYet: 'ÊöÇÊó†ÂÜ≥Á≠ñ',
    aiDecisionsWillAppear: 'AI‰∫§ÊòìÂÜ≥Á≠ñÂ∞ÜÊòæÁ§∫Âú®ËøôÈáå',
    cycle: 'Âë®Êúü',
    success: 'ÊàêÂäü',
    failed: 'Â§±Ë¥•',
    inputPrompt: 'ËæìÂÖ•ÊèêÁ§∫',
    aiThinking: 'üí≠ AIÊÄùÁª¥ÈìæÂàÜÊûê',
    collapse: '‚ñº Êî∂Ëµ∑',
    expand: '‚ñ∂ Â±ïÂºÄ',

    // Equity Chart
    accountEquityCurve: 'Ë¥¶Êà∑ÂáÄÂÄºÊõ≤Á∫ø',
    noHistoricalData: 'ÊöÇÊó†ÂéÜÂè≤Êï∞ÊçÆ',
    dataWillAppear: 'ËøêË°åÂá†‰∏™Âë®ÊúüÂêéÂ∞ÜÊòæÁ§∫Êî∂ÁõäÁéáÊõ≤Á∫ø',
    initialBalance: 'ÂàùÂßã‰ΩôÈ¢ù',
    currentEquity: 'ÂΩìÂâçÂáÄÂÄº',
    historicalCycles: 'ÂéÜÂè≤Âë®Êúü',
    displayRange: 'ÊòæÁ§∫ËåÉÂõ¥',
    recent: 'ÊúÄËøë',
    allData: 'ÂÖ®ÈÉ®Êï∞ÊçÆ',
    cycles: '‰∏™',

    // Competition Page
    aiCompetition: 'AIÁ´ûËµõ',
    traders: '‰Ωç‰∫§ÊòìËÄÖ',
    liveBattle: 'Qwen vs DeepSeek ¬∑ ÂÆûÊó∂ÂØπÊàò',
    realTimeBattle: 'ÂÆûÊó∂ÂØπÊàò',
    leader: 'È¢ÜÂÖàËÄÖ',
    leaderboard: 'ÊéíË°åÊ¶ú',
    live: 'Áõ¥Êí≠',
    realTime: 'ÂÆûÊó∂',
    performanceComparison: 'Ë°®Áé∞ÂØπÊØî',
    realTimePnL: 'ÂÆûÊó∂Áõà‰∫èÁôæÂàÜÊØî',
    realTimePnLPercent: 'ÂÆûÊó∂Êî∂ÁõäÁéá',
    headToHead: '‚öîÔ∏è Ê≠£Èù¢ÂØπÂÜ≥',
    leadingBy: 'È¢ÜÂÖà {gap}%',
    behindBy: 'ËêΩÂêé {gap}%',
    equity: 'ÊùÉÁõä',
    pnl: 'Êî∂Áõä',
    pos: 'ÊåÅ‰ªì',

    // AI Learning
    aiLearning: 'AIÂ≠¶‰π†‰∏éÂèçÊÄù',
    tradesAnalyzed: 'Â∑≤ÂàÜÊûê {count} Á¨î‰∫§Êòì ¬∑ ÂÆûÊó∂ÊºîÂåñ',
    latestReflection: 'ÊúÄÊñ∞ÂèçÊÄù',
    fullCoT: 'üìã ÂÆåÊï¥ÊÄùÁª¥Èìæ',
    totalTrades: 'ÊÄª‰∫§ÊòìÊï∞',
    winRate: 'ËÉúÁéá',
    avgWin: 'Âπ≥ÂùáÁõàÂà©',
    avgLoss: 'Âπ≥Âùá‰∫èÊçü',
    profitFactor: 'Áõà‰∫èÊØî',
    avgWinDivLoss: 'Âπ≥ÂùáÁõàÂà© √∑ Âπ≥Âùá‰∫èÊçü',
    excellent: 'üî• ‰ºòÁßÄ - ÁõàÂà©ËÉΩÂäõÂº∫',
    good: '‚úì ËâØÂ•Ω - Á®≥ÂÆöÁõàÂà©',
    fair: '‚ö†Ô∏è ‰∏ÄËà¨ - ÈúÄË¶Å‰ºòÂåñ',
    poor: '‚ùå ËæÉÂ∑Æ - ‰∫èÊçüË∂ÖËøáÁõàÂà©',
    bestPerformer: 'ÊúÄ‰Ω≥Ë°®Áé∞',
    worstPerformer: 'ÊúÄÂ∑ÆË°®Áé∞',
    symbolPerformance: 'üìä Â∏ÅÁßçË°®Áé∞',
    tradeHistory: 'ÂéÜÂè≤Êàê‰∫§',
    completedTrades: 'ÊúÄËøë {count} Á¨îÂ∑≤ÂÆåÊàê‰∫§Êòì',
    noCompletedTrades: 'ÊöÇÊó†ÂÆåÊàêÁöÑ‰∫§Êòì',
    completedTradesWillAppear: 'Â∑≤ÂÆåÊàêÁöÑ‰∫§ÊòìÂ∞ÜÊòæÁ§∫Âú®ËøôÈáå',
    entry: 'ÂÖ•Âú∫',
    exit: 'Âá∫Âú∫',
    stopLoss: 'Ê≠¢Êçü',
    latest: 'ÊúÄÊñ∞',

    // AI Learning Description
    howAILearns: 'üí° AIÂ¶Ç‰ΩïÂ≠¶‰π†ÂíåËøõÂåñ',
    aiLearningPoint1: 'ÊØèÊ¨°ÂÜ≥Á≠ñÂâçÂàÜÊûêÊúÄËøë20‰∏™‰∫§ÊòìÂë®Êúü',
    aiLearningPoint2: 'ËØÜÂà´Ë°®Áé∞ÊúÄÂ•ΩÂíåÊúÄÂ∑ÆÁöÑÂ∏ÅÁßç',
    aiLearningPoint3: 'Ê†πÊçÆËÉúÁéá‰ºòÂåñ‰ªì‰ΩçÂ§ßÂ∞è',
    aiLearningPoint4: 'ÈÅøÂÖçÈáçÂ§çËøáÂéªÁöÑÈîôËØØ',

    // AI Traders Management
    manageAITraders: 'ÁÆ°ÁêÜÊÇ®ÁöÑAI‰∫§ÊòìÊú∫Âô®‰∫∫',
    aiModels: 'AIÊ®°Âûã',
    exchanges: '‰∫§ÊòìÊâÄ',
    createTrader: 'ÂàõÂª∫‰∫§ÊòìÂëò',
    modelConfiguration: 'Ê®°ÂûãÈÖçÁΩÆ',
    configured: 'Â∑≤ÈÖçÁΩÆ',
    notConfigured: 'Êú™ÈÖçÁΩÆ',
    inUse: 'Ê≠£Âú®‰ΩøÁî®',
    noModelsConfigured: 'ÊöÇÊó†Â∑≤ÈÖçÁΩÆÁöÑAIÊ®°Âûã',
    noExchangesConfigured: 'ÊöÇÊó†Â∑≤ÈÖçÁΩÆÁöÑ‰∫§ÊòìÊâÄ',
    currentTraders: 'ÂΩìÂâç‰∫§ÊòìÂëò',
    noTraders: 'ÊöÇÊó†AI‰∫§ÊòìÂëò',
    createFirstTrader: 'ÂàõÂª∫ÊÇ®ÁöÑÁ¨¨‰∏Ä‰∏™AI‰∫§ÊòìÂëòÂºÄÂßã‰ΩøÁî®',
    configureModelsFirst: 'ËØ∑ÂÖàÈÖçÁΩÆAIÊ®°Âûã',
    configureExchangesFirst: 'ËØ∑ÂÖàÈÖçÁΩÆ‰∫§ÊòìÊâÄ',
    configureModelsAndExchangesFirst: 'ËØ∑ÂÖàÈÖçÁΩÆAIÊ®°ÂûãÂíå‰∫§ÊòìÊâÄ',
    modelNotConfigured: 'ÊâÄÈÄâÊ®°ÂûãÊú™ÈÖçÁΩÆ',
    exchangeNotConfigured: 'ÊâÄÈÄâ‰∫§ÊòìÊâÄÊú™ÈÖçÁΩÆ',
    confirmDeleteTrader: 'Á°ÆÂÆöË¶ÅÂà†Èô§Ëøô‰∏™‰∫§ÊòìÂëòÂêóÔºü',
    confirmDeleteModel: 'Á°ÆÂÆöË¶ÅÂà†Èô§Ê≠§AIÊ®°ÂûãÈÖçÁΩÆÂêóÔºü',
    confirmDeleteExchange: 'Á°ÆÂÆöË¶ÅÂà†Èô§Ê≠§‰∫§ÊòìÊâÄÈÖçÁΩÆÂêóÔºü',
    status: 'Áä∂ÊÄÅ',
    start: 'ÂêØÂä®',
    stop: 'ÂÅúÊ≠¢',
    createNewTrader: 'ÂàõÂª∫Êñ∞ÁöÑAI‰∫§ÊòìÂëò',
    selectAIModel: 'ÈÄâÊã©AIÊ®°Âûã',
    selectExchange: 'ÈÄâÊã©‰∫§ÊòìÊâÄ',
    selectModel: 'ËØ∑ÈÄâÊã©Ê®°Âûã',
    selectExchangeOption: 'ËØ∑ÈÄâÊã©‰∫§ÊòìÊâÄ',
    traderName: '‰∫§ÊòìÂëòÂêçÁß∞',
    enterTraderName: 'ËæìÂÖ•‰∫§ÊòìÂëòÂêçÁß∞',
    cancel: 'ÂèñÊ∂à',
    create: 'ÂàõÂª∫',
    configureAIModels: 'ÈÖçÁΩÆAIÊ®°Âûã',
    configureExchanges: 'ÈÖçÁΩÆ‰∫§ÊòìÊâÄ',
    useTestnet: '‰ΩøÁî®ÊµãËØïÁΩë',
    enabled: 'ÂêØÁî®',
    save: '‰øùÂ≠ò',
    deleteConfig: 'Âà†Èô§ÈÖçÁΩÆ',
    editAIModel: 'ÁºñËæëAIÊ®°Âûã',
    addAIModel: 'Ê∑ªÂä†AIÊ®°Âûã',
    editExchange: 'ÁºñËæë‰∫§ÊòìÊâÄ',
    addExchange: 'Ê∑ªÂä†‰∫§ÊòìÊâÄ',
    initialFunds: 'ÂàùÂßãËµÑÈáë (USDT)',
    marginMode: '‰ªì‰ΩçÊ®°Âºè',
    crossMargin: 'ÂÖ®‰ªìÊ®°Âºè',
    isolatedMargin: 'ÈÄê‰ªìÊ®°Âºè',
    crossMarginDesc: 'ÂÖ®‰ªìÊ®°ÂºèÔºöÊâÄÊúâ‰ªì‰ΩçÂÖ±‰∫´Ë¥¶Êà∑‰ΩôÈ¢ù‰Ωú‰∏∫‰øùËØÅÈáë',
    isolatedMarginDesc: 'ÈÄê‰ªìÊ®°ÂºèÔºöÊØè‰∏™‰ªì‰ΩçÁã¨Á´ãÁÆ°ÁêÜ‰øùËØÅÈáëÔºåÈ£éÈô©ÈöîÁ¶ª',
    advancedSettings: 'È´òÁ∫ßËÆæÁΩÆ',
    customStrategy: 'Ëá™ÂÆö‰πâ‰∫§ÊòìÁ≠ñÁï•',
    customStrategyOptional: 'Ëá™ÂÆö‰πâ‰∫§ÊòìÁ≠ñÁï• (ÂèØÈÄâ)',
    customStrategyPlaceholder: '‰æãÂ¶ÇÔºö‰∏ìÊ≥®‰∫é‰∏ªÊµÅÂ∏ÅÁßçBTC/ETH/SOLÔºåÈÅøÂÖçMEMEÂ∏Å„ÄÇ‰ΩøÁî®‰øùÂÆàÁ≠ñÁï•ÔºåÂçïÁ¨î‰ªì‰Ωç‰∏çË∂ÖËøáË¥¶Êà∑ÁöÑ30%...',
    customStrategyDesc: 'ËæìÂÖ•Ëá™ÂÆö‰πâÁöÑ‰∫§ÊòìÁ≠ñÁï•ÂíåËßÑÂàôÔºåÂ∞Ü‰Ωú‰∏∫AI‰∫§ÊòìÂëòÁöÑÈ¢ùÂ§ñÊåáÂØº„ÄÇÁïôÁ©∫‰ΩøÁî®ÈªòËÆ§Á≠ñÁï•„ÄÇ',
    overrideBaseStrategy: 'Ë¶ÜÁõñÂü∫Á°Ä‰∫§ÊòìÁ≠ñÁï•',
    overrideBaseStrategyWarning: '‚ö†Ô∏è Ë≠¶ÂëäÔºöÂãæÈÄâÂêéÂ∞ÜÂÆåÂÖ®‰ΩøÁî®ÊÇ®ÁöÑËá™ÂÆö‰πâÁ≠ñÁï•Ôºå‰∏çÂÜç‰ΩøÁî®Á≥ªÁªüÈªòËÆ§ÁöÑÈ£éÊéßÂíå‰∫§ÊòìÈÄªËæë„ÄÇËøôÂèØËÉΩÂØºËá¥‰∫§ÊòìÈ£éÈô©Â¢ûÂä†„ÄÇ‰ªÖÂú®ÊÇ®ÂÆåÂÖ®ÁêÜËß£‰∫§ÊòìÈÄªËæëÊó∂‰ΩøÁî®Ê≠§ÈÄâÈ°π„ÄÇ',
    privateKey: 'Private Key (Êó†ÈúÄ0xÂâçÁºÄ)',
    walletAddress: 'Èí±ÂåÖÂú∞ÂùÄ',
    userAddress: 'Áî®Êà∑Âú∞ÂùÄ',
    signerAddress: 'Á≠æÂêçËÄÖÂú∞ÂùÄ',
    enterApiKey: 'ËØ∑ËæìÂÖ• API Key',
    binanceApiKey: 'ËØ∑ËæìÂÖ• Binance API Key',
    binanceSecretKey: 'ËØ∑ËæìÂÖ• Binance Secret Key',
    hyperliquidPrivateKey: 'ËØ∑ËæìÂÖ•‰ª•Â§™ÂùäÁßÅÈí•',
    hyperliquidWalletAddr: 'ËØ∑ËæìÂÖ•‰ª•Â§™ÂùäÈí±ÂåÖÂú∞ÂùÄ',
    asterUser: 'ËØ∑ËæìÂÖ• Aster Áî®Êà∑Âú∞ÂùÄ',
    asterSigner: 'ËØ∑ËæìÂÖ• Aster Á≠æÂêçËÄÖÂú∞ÂùÄ',
    asterPrivateKey: 'ËØ∑ËæìÂÖ• Aster ÁßÅÈí•',
    createTraderFailed: 'ÂàõÂª∫‰∫§ÊòìÂëòÂ§±Ë¥•',
    deleteTraderFailed: 'Âà†Èô§‰∫§ÊòìÂëòÂ§±Ë¥•',
    deleteConfigFailed: 'Âà†Èô§ÈÖçÁΩÆÂ§±Ë¥•',
    saveConfigFailed: '‰øùÂ≠òÈÖçÁΩÆÂ§±Ë¥•',
    deleteExchangeConfigFailed: 'Âà†Èô§‰∫§ÊòìÊâÄÈÖçÁΩÆÂ§±Ë¥•',
    saveExchangeConfigFailed: '‰øùÂ≠ò‰∫§ÊòìÊâÄÈÖçÁΩÆÂ§±Ë¥•',
    operationFailed: 'Êìç‰ΩúÂ§±Ë¥•',

    // Loading & Error
    loading: 'Âä†ËΩΩ‰∏≠...',
    loadingError: '‚ö†Ô∏è Âä†ËΩΩAIÂ≠¶‰π†Êï∞ÊçÆÂ§±Ë¥•',
    noCompleteData: 'ÊöÇÊó†ÂÆåÊï¥‰∫§ÊòìÊï∞ÊçÆÔºàÈúÄË¶ÅÂÆåÊàêÂºÄ‰ªì‚ÜíÂπ≥‰ªìÁöÑÂÆåÊï¥Âë®ÊúüÔºâ',
    
    // Login & Register
    login: 'ÁôªÂΩï',
    register: 'Ê≥®ÂÜå',
    email: 'ÈÇÆÁÆ±',
    password: 'ÂØÜÁ†Å',
    confirmPassword: 'Á°ÆËÆ§ÂØÜÁ†Å',
    emailPlaceholder: 'ËØ∑ËæìÂÖ•ÈÇÆÁÆ±Âú∞ÂùÄ',
    passwordPlaceholder: 'ËØ∑ËæìÂÖ•ÂØÜÁ†ÅÔºàËá≥Â∞ë6‰ΩçÔºâ',
    confirmPasswordPlaceholder: 'ËØ∑ÂÜçÊ¨°ËæìÂÖ•ÂØÜÁ†Å',
    otpPlaceholder: '000000',
    loginTitle: 'ÁôªÂΩïÂà∞ÊÇ®ÁöÑË¥¶Êà∑',
    registerTitle: 'ÂàõÂª∫Êñ∞Ë¥¶Êà∑',
    loginButton: 'ÁôªÂΩï',
    registerButton: 'Ê≥®ÂÜå',
    back: 'ËøîÂõû',
    noAccount: 'ËøòÊ≤°ÊúâË¥¶Êà∑Ôºü',
    hasAccount: 'Â∑≤ÊúâË¥¶Êà∑Ôºü',
    registerNow: 'Á´ãÂç≥Ê≥®ÂÜå',
    loginNow: 'Á´ãÂç≥ÁôªÂΩï',
    forgotPassword: 'ÂøòËÆ∞ÂØÜÁ†ÅÔºü',
    rememberMe: 'ËÆ∞‰ΩèÊàë',
    otpCode: 'OTPÈ™åËØÅÁ†Å',
    scanQRCode: 'Êâ´Êèè‰∫åÁª¥Á†Å',
    enterOTPCode: 'ËæìÂÖ•6‰ΩçOTPÈ™åËØÅÁ†Å',
    verifyOTP: 'È™åËØÅOTP',
    setupTwoFactor: 'ËÆæÁΩÆÂèåÂõ†Á¥†ËÆ§ËØÅ',
    setupTwoFactorDesc: 'ËØ∑Êåâ‰ª•‰∏ãÊ≠•È™§ËÆæÁΩÆGoogleÈ™åËØÅÂô®‰ª•‰øùÊä§ÊÇ®ÁöÑË¥¶Êà∑ÂÆâÂÖ®',
    scanQRCodeInstructions: '‰ΩøÁî®Google AuthenticatorÊàñAuthyÊâ´ÊèèÊ≠§‰∫åÁª¥Á†Å',
    otpSecret: 'ÊàñÊâãÂä®ËæìÂÖ•Ê≠§ÂØÜÈí•Ôºö',
    qrCodeHint: '‰∫åÁª¥Á†ÅÔºàÂ¶ÇÊûúÊó†Ê≥ïÊâ´ÊèèÔºåËØ∑‰ΩøÁî®‰∏ãÊñπÂØÜÈí•ÔºâÔºö',
    step1Title: 'Ê≠•È™§1Ôºö‰∏ãËΩΩGoogle Authenticator',
    step1Desc: 'Âú®ÊâãÊú∫Â∫îÁî®ÂïÜÂ∫ó‰∏ãËΩΩÂπ∂ÂÆâË£ÖGoogle AuthenticatorÂ∫îÁî®',
    step2Title: 'Ê≠•È™§2ÔºöÊ∑ªÂä†Ë¥¶Êà∑',
    step2Desc: 'Âú®Â∫îÁî®‰∏≠ÁÇπÂáª‚Äú+‚ÄùÔºåÈÄâÊã©‚ÄúÊâ´Êèè‰∫åÁª¥Á†Å‚ÄùÊàñ‚ÄúÊâãÂä®ËæìÂÖ•ÂØÜÈí•‚Äù',
    step3Title: 'Ê≠•È™§3ÔºöÈ™åËØÅËÆæÁΩÆ',
    step3Desc: 'ËÆæÁΩÆÂÆåÊàêÂêéÔºåÁÇπÂáª‰∏ãÊñπÊåâÈíÆËæìÂÖ•6‰ΩçÈ™åËØÅÁ†Å',
    setupCompleteContinue: 'ÊàëÂ∑≤ÂÆåÊàêËÆæÁΩÆÔºåÁªßÁª≠',
    copy: 'Â§çÂà∂',
    completeRegistration: 'ÂÆåÊàêÊ≥®ÂÜå',
    completeRegistrationSubtitle: '‰ª•ÂÆåÊàêÊ≥®ÂÜå',
    loginSuccess: 'ÁôªÂΩïÊàêÂäü',
    registrationSuccess: 'Ê≥®ÂÜåÊàêÂäü',
    loginFailed: 'ÁôªÂΩïÂ§±Ë¥•',
    registrationFailed: 'Ê≥®ÂÜåÂ§±Ë¥•',
    verificationFailed: 'OTPÈ™åËØÅÂ§±Ë¥•',
    invalidCredentials: 'ÈÇÆÁÆ±ÊàñÂØÜÁ†ÅÈîôËØØ',
    passwordMismatch: '‰∏§Ê¨°ËæìÂÖ•ÁöÑÂØÜÁ†Å‰∏ç‰∏ÄËá¥',
    emailRequired: 'ËØ∑ËæìÂÖ•ÈÇÆÁÆ±',
    passwordRequired: 'ËØ∑ËæìÂÖ•ÂØÜÁ†Å',
    invalidEmail: 'ÈÇÆÁÆ±Ê†ºÂºè‰∏çÊ≠£Á°Æ',
    passwordTooShort: 'ÂØÜÁ†ÅËá≥Â∞ëÈúÄË¶Å6‰∏™Â≠óÁ¨¶',
  }
};

export function t(key: string, lang: Language, params?: Record<string, string | number>): string {
  let text = translations[lang][key as keyof typeof translations['en']] || key;

  // Replace parameters like {count}, {gap}, etc.
  if (params) {
    Object.entries(params).forEach(([param, value]) => {
      text = text.replace(`{${param}}`, String(value));
    });
  }

  return text;
}
